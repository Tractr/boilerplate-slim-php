<?php 
 
/**
 * Search <<Model lower>>.
 */
 
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use Valitron\Validator as Validator;
use App\Library\HttpException;
 
$_func = function (Request $request, Response $response, array $args) {

<<# If the search action is not accessible as guest, check the credentials>>
<<if SearchAccess not guest>>
 
    //Authentication
    $this->get('session')->verifyCredentials($request);
<<endif>>
 
    $_get = $request->getQueryParams();
 
    $validator = new Validator($_get);
    $validator->rules(array(
        'required' => array(
            array('_page', true),
            array('_limit', true),
        ),
        'min' => array(
            array('_limit', 1), 
            array('_page', 0)
        ),
        'max' => array(
            array('_limit', 100)
        ) 
    ));
 
    // forbidden keys
<<# Remove all non-seachable keys >>
<<for Fields not searchable f>>
    unset($_get['<<f snake>>']);
<<endfor>>
 
    if ($validator->validate()) {
 
        $page = intval($_get['_page']);
        $limit = intval($_get['_limit']);
        $order = 'desc';
        $sort =  '<<PrimaryField raw>>';
        $skip = $page * $limit;
 
        <<# Allow the sort key to equal sortable or primary fields only >>
        if (isset($_get['_sort']) && in_array($_get['sort'], array(<<for Fields sortable or primary f>>'<<f snake>>', <<endfor>>))) {
            $sort = $_get['_sort'];
        }
 
        if (isset($_get['_order']) && in_array($_get['_order'], array('asc', 'desc'))) {
            $order = $_get['_order'];
        }
 
        if ($sort == '' || $order == '') {
            // string wrong formed
            throw new HttpException(400, 'Missing sort and/or order parameters');
        }
 
        $query = App\Models\<<Model pascal>>::getCursor($_get, $request);
        $total = $query->count();
        /** @var App\Models\<<Model pascal>>[] $models */
        $models = $query->orderBy($sort, $order)
                       ->skip($skip)
                       ->take($limit)
                       ->get();
 
        // Push data to payload
        $result = array();
        foreach($models as $model)
        {
            // Clone data
            $clone = json_decode(json_encode($model), true);
<<# For all embedded entity relation fields (if any), set the populated value >>
<<if Fields entity and embedded>>
            // Populate relationships
    <<for Fields entity and embedded f>>
            $clone['<<f snake>>'] = $model->_<<f snake>>;
    <<endfor>>
 
<<endif>>
            array_push($result, $clone);
        }
 
        $response->getBody()->write(json_encode(array(
            'page' => $page ,
            'limit' => $limit,
            'count' => count($result),
            'total' => $total,
            'items' => $result
        )));
        return $response->withStatus(200);
    }
 
    // string wrong formed
    throw HttpException::badRequest($validator);
};
 
//Define admin route callback
$app->get('/admin/<<Model kebab>>', $_func);
<<# If the search action is accessible at least as owner, add the public route >>
<<if SearchAccess gteOwner>>
//Define route callback
$app->get('/<<Model kebab>>', $_func);
<<endif>>