<?php
 
/**
 * Read <<Model lower>>.
 */
 
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use App\Library\HttpException;
 
$_func = function (Request $request, Response $response, array $args) {

<<# If the read action is not accessible as guest, check the credentials >>
<<if ReadAccess not guest>>
 
    //Authentication
    $this->get('session')->verifyCredentials($request);
<<endif>>
 
    /** @var App\Models\<<Model pascal>> $model */
    $model = App\Models\<<Model pascal>>::find($args['id']);
    if ($model == null) {
        // Entity was not found
        throw new HttpException(404, '<<Model capital>> not found');
    }

<<# If the read action is accessible as owner, check if the credentials match the ownership field's value >>
<<if ReadAccess owner>>
 
    //Ownership
    $this->get('session')->verifyOwnership($request, $model-><<for1 Fields ownership o>><<o snake>><<endfor>>);
<<endif>>
 
    // Clone data
    $payload = json_decode(json_encode($model), true);
 
    // Populate relationship
<<# Populate entity relations for non-hidden fields >>
<<for Fields entity and not hidden f>>
    $payload['<<f snake>>'] = $model->_<<f snake>>;
<<endfor>>
 
    $response->getBody()->write(json_encode($payload));
    return $response->withStatus(201);
};
 
//Define admin route callback
$app->get('/admin/<<Model kebab>>/{id}', $_func);
<<# If the read action is accessible at least as owner, add the public route >>
<<if ReadAccess gteOwner>>
//Define route callback
$app->get('/<<Model kebab>>/{id}', $_func);
<<endif>>