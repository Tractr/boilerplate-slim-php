<?php 
 
/**
 * Update <<Model lower>>.
 */
 
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use Valitron\Validator as Validator;
use App\Library\HttpException;
 
$_func = function (Request $request, Response $response, array $args) {

<<# If the update action is not accessible as guest, check the credentials >>
<<if UpdateAccess not guest>>
 
    //Authentication
    $this->get('session')->verifyCredentials($request);
<<endif>>
 
    /** @var App\Models\<<Model pascal>> $model */
    $model = App\Models\<<Model pascal>>::find($args['id']);
    if ($model == null) {
        // Entity was not found
        throw new HttpException(404, '<<Model capital>> not found');
    }

<<# If the update action is accessible as owner, check if the credentials match the ownership field's value >>
<<if UpdateAccess owner>>
 
    //Ownership
    $this->get('session')->verifyOwnership($request, $model-><<for1 Fields ownership o>><<o snake>><<endfor>>);
<<endif>>
 
    $data = $request->getParsedBody();
    
    //Form validation
    $validator = new Validator($data);
<<# Define validator for all fields that are not internal and not restricted >>
<<for Fields not restricted and not internal f>>
    $validator->rule('optional', '<<f snake>>'<<if f nullable>>, true <<endif>>)<<=validator(f)>>;
<<endfor>>

<<# 
    If the request is coming from admin,
    define validator for all restricted but not internal fields.
    Otherwise exclude the field.
>>
<<if Fields restricted and not internal>>
 
    // For admins only
    if ($request->getAttribute('fromAdmin')) {
    <<for Fields restricted and not internal f>>
        $validator->rule('optional', '<<f snake>>'<<if f nullable>>, true <<endif>>)<<=validator(f)>>;
    <<endfor>>
    } else {
    <<for Fields restricted and not internal f>>
        unset($data['<<f snake>>']);
    <<endfor>>
    }
<<endif>>
 
    if ($validator->validate()) {
 
        try {
 
            $model->fill($data);
            $model->save();
<<# For each many-to-many relation field, re-attach the values >>
<<for Fields entity and multiple f>>
 
            $model->_<<f snake>>()->detach();
            $model->_<<f snake>>()->attach($data['<<f snake>>']);
<<endfor>>
 
            return $response->withStatus(204);
    
        } catch (\Exception $e) {
    
            if ($e->getCode() == 23000) {
                // Deal with duplicate key error
                throw new HttpException(409, $e->getMessage());
            }
            throw HttpException::internal($e);
        }
    }
    // Bad payload request
    throw HttpException::badRequest($validator);
};
 
//Define admin route callback
$app->patch('/admin/<<Model kebab>>/{id}', $_func);
<<# If the update action is accessible at least as owner, add the public route >>
<<if UpdateAccess gteOwner>>
//Define route callback
$app->patch('/<<Model kebab>>/{id}', $_func);
<<endif>>
<<< 
function validator(f) {
    
    if (f.type === "boolean") return "->rule('boolean', '" + f.name + "')";
    else if (f.type === "string") {
        if (f.subtype === "email") return "->rule('email', '" + f.name + "')";
        else if (f.subtype === "password") return "->rule('lengthMin', '" + f.name + "', 6)";
    }
    else if (f.type === "number") {
        $return = "->rule('numeric', '" + f.name + "')";
        if (f.subtype === "latitude") $return += "->rules(array('min' => array('"+ f.name +"', -90), 'max' => array('"+ f.name +"', 90)))";
        else if (f.subtype === "longitude") $return += "->rules(array('min' => array('"+ f.name +"', -180), 'max' => array('"+ f.name +"', 180)))";
        return $return;
    }
    else if (f.type === "datetime") {
        return "->rule('integer', '" + f.name + "')";
    }
    else if (f.type === "entity") {
        return f.multiple ? 
            "->rule('array', '" + f.name + "')" :
            "->rule('integer', '" + f.name + "')";
    }
    
    return '';
}
>>>