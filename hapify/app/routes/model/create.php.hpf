<?php 
 
/**
 * Create <<Model lower>>.
 * Returns the created <<Model lower>>.
 */
 
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use Valitron\Validator as Validator;
use App\Library\HttpException;
 
$_func = function (Request $request, Response $response, array $args) {

<<# If the create action is not accessible as guest, check the credentials >>
<<if CreateAccess not guest>>
 
    //Authentication
    $this->get('session')->verifyCredentials($request);
<<endif>>
    
    $data = $request->getParsedBody();
 
    //Form validation
    $validator = new Validator($data);
<<# Require and validate all fields that are not internal and not restricted >>
<<for Fields not restricted and not internal f>>
    $validator->rule('required', '<<f snake>>'<<if f nullable>>, true <<endif>>)<<=validator(f)>>;
<<endfor>>

<<# If the request is coming from admin, require and validate all restricted but not internal fields >>
<<if Fields restricted and not internal>>
 
    // For admins only
    if ($request->getAttribute('fromAdmin')) {
    <<for Fields restricted and not internal f>>
        $validator->rule('required', '<<f snake>>'<<if f nullable>>, true <<endif>>)<<=validator(f)>>;
    <<endfor>>
    }
<<endif>>
 
    if ($validator->validate()) {
    
        try {

<<# If the request is NOT coming from admin, set default values for restricted but not internal fields >>
<<if Fields restricted and not internal>>
 
            // Init restricted fields
            if(!$request->getAttribute('fromAdmin')) {
    <<for Fields restricted and not internal f>>
                $data['<<f snake>>'] = <<=defaultValue(f)>>;
    <<endfor>>
            }
<<endif>>
 
            $model = new App\Models\<<Model pascal>>();
            $model->fill($data);

<<# Set default values for internal fields (except primary key) >>
<<if Fields internal and not primary>>
 
            // Init internal fields
    <<for Fields internal and not primary f>>
            $model->setAttribute('<<f snake>>', <<=defaultValue(f)>>);
    <<endfor>>
<<endif>>
 
            $model->save();
<<# For each many-to-many relation field, attach the values >>
<<for Fields entity and multiple f>>
            $model->_<<f snake>>()->attach($data['<<f snake>>']);
<<endfor>>
 
            $response->getBody()->write($model->toJSON());
 
            return $response->withStatus(201);
                        
        } catch (\Exception $e) {
            if ($e->getCode() == 23000) {
                // Deal with duplicate key error
                throw new HttpException(409, $e->getMessage());
            }
            throw HttpException::internal($e);
        }

    }
 
    // Bad payload request
    throw HttpException::badRequest($validator);
};
 
//Define admin route callback
$app->post('/admin/<<Model kebab>>', $_func);
<<# If the create action is accessible at least as owner, add the public route>>
<<if CreateAccess gteOwner>>
//Define route callback
$app->post('/<<Model kebab>>', $_func);
<<endif>>

<<< 
function defaultValue(f) {
    let v = "null";
    
    if (f.ownership) {
        v = f.multiple ? "array($request->getAttribute('userId'))" : "$request->getAttribute('userId')";
    }
    else if (f.multiple) v = "array()";
    else if (f.type === "boolean") v = "false";
    else if (f.type === "string") {
        if (f.names.snake === 'role') v = "'user'";
        else v = "''";
    }
    else if (f.type === "number") v = "0";
    else if (f.type === "datetime") v = "date('Y-m-d H:i:s')";
    else if (f.type === "object") v = "array()";

    return v;
}
function validator(f) {
    
    if (f.type === "boolean") return "->rule('boolean', '" + f.name + "')";
    else if (f.type === "string") {
        if (f.subtype === "email") return "->rule('email', '" + f.name + "')";
        else if (f.subtype === "password") return "->rule('lengthMin', '" + f.name + "', 6)";
    }
    else if (f.type === "number") {
        $return = "->rule('numeric', '" + f.name + "')";
        if (f.subtype === "latitude") $return += "->rules(array('min' => array('"+ f.name +"', -90), 'max' => array('"+ f.name +"', 90)))";
        else if (f.subtype === "longitude") $return += "->rules(array('min' => array('"+ f.name +"', -180), 'max' => array('"+ f.name +"', 180)))";
        return $return;
    }
    else if (f.type === "datetime") {
        return "->rule('integer', '" + f.name + "')";
    }
    else if (f.type === "entity") {
        return f.multiple ? 
            "->rule('array', '" + f.name + "')" :
            "->rule('integer', '" + f.name + "')";
    }
    
    return '';
}
>>>