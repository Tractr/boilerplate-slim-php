<?php
 
require_once __DIR__ . '/../../../public/initialize.php';
require_once __DIR__ . '/../inc/helper.php';
 
use \Illuminate\Database\Schema\Blueprint;
 
/** @var \Illuminate\Database\Schema\Builder $schema */
$schema = $capsule::schema();
$schemaManager = $schema->getConnection()->getDoctrineSchemaManager();
 
// ==================================
// Create tables & columns
// ==================================
<<for Models m>>
 
// Create table for model <<m lower>>
<<# Create a table for each models >>
if (!$schema->hasTable('<<m snake>>')) {
    $schema->create('<<m snake>>', function (Blueprint $table) {
        $table->increments('<<m.f.primary raw>>');
    <<# Create a column for each fields except for primary key and many-to-many relations >>
    <<for m.f not primary and not multiple f>>
        $table-><<= getColumnMethod(f)>>('<<f snake>>'<<if f entity>>, false, true<<endif>>)<<if f nullable>>->nullable()<<endif>>;
    <<endfor>>
    });
    Helpers::output('', 'Did create table <<m lower>>');
}
    <<# If the model has at least one many-to-many relation, generate the following code block >>
    <<if m.f entity and multiple>>
 
// Many-to-many relationships for model <<m lower>>
        <<# For each many-to-many relation, create a relation table >>
        <<for m.f entity and multiple f>>
if (!$schema->hasTable('<<m snake>>__<<f snake>>')) {
    $schema->create('<<m snake>>__<<f snake>>', function (Blueprint $table) {
        $table->increments('<<m.f.primary raw>>');
        $table->integer('<<m snake>>', false, true);
        $table->integer('<<f.m snake>>', false, true);
    });
    Helpers::output('', 'Did create relationship table <<m lower>> to <<f lower>>');
}
        <<endfor>>
    <<endif>>
<<endfor>>

// ==================================
// Create indexes
// ==================================
<<for Models m>>
 
<<# Create a table for each models >>
// Create indexes for model <<m lower>>
$schema->table('<<m snake>>', function (Blueprint $table) {
    global $schemaManager;
    $tableDetails = $schemaManager->listTableDetails($table->getTable());

    <<# 
        Create basic index for fields that are searchable or sortable
        except for primary key and entity relations (one-to-one or many-to-many)
    >>
    <<for m.f (searchable or sortable) and not primary and not entity f>>
 
    if (!$tableDetails->hasIndex('<<m snake>>_<<f snake>>')) {
        $table->index('<<f snake>>', '<<m snake>>_<<f snake>>');
        Helpers::output('', 'Did create index <<m snake>>_<<f snake>>');
    }
    <<endfor>>

    <<# 
        If the model has at least one unique field,
        create a single unique index that contains all unique fields
    >>
    <<if m.f unique and not primary and not (entity and multiple)>>
 
    if (!$tableDetails->hasIndex('<<m snake>>__uniques')) {
        $table->unique([<<for m.f unique and not primary and not (entity and multiple) f>>'<<f snake>>', <<endfor>>], '<<m snake>>__uniques');
        Helpers::output('', 'Did create index <<m snake>>__uniques');
    }
    <<endif>>

    <<# Create foreign key contraints for fields that are one-to-one entity relation >>
    <<for m.f entity and not multiple f>>
 
    if (!$tableDetails->hasIndex('<<m snake>>_<<f snake>>__foreign')) {
        $table->foreign('<<f snake>>', '<<m snake>>_<<f snake>>__foreign')->references('<<f.m.f.primary raw>>')->on('<<f.m snake>>');
        Helpers::output('', 'Did create index <<m snake>>_<<f snake>>__foreign');
    }
    <<endfor>>

});

    <<# Create foreign key contraints in relation table for fields that are many-to-many entity relation >>
    <<if m.f entity and multiple>>
        <<for m.f entity and multiple f>>
// Many-to-many relationships for field <<m lower>>.<<f lower>>
$schema->table('<<m snake>>__<<f snake>>', function (Blueprint $table) {
    global $schemaManager;
    $tableDetails = $schemaManager->listTableDetails($table->getTable());
 
    if (!$tableDetails->hasIndex('<<m snake>>__<<f snake>>.<<m snake>>')) {
        $table->foreign('<<m snake>>', '<<m snake>>__<<f snake>>.<<m snake>>')->references('<<m.f.primary raw>>')->on('<<m snake>>')->onDelete('cascade');
        Helpers::output('', 'Did create relationship index for <<m snake>>__<<f snake>>.<<m lower>>');
    }
    if (!$tableDetails->hasIndex('<<m snake>>__<<f snake>>.<<f.m snake>>')) {
        $table->foreign('<<f.m snake>>', '<<m snake>>__<<f snake>>.<<f.m snake>>')->references('<<f.m.f.primary raw>>')->on('<<f.m snake>>')->onDelete('cascade');
        Helpers::output('', 'Did create relationship index for <<m snake>>__<<f snake>>.<<f.m lower>>');
    }
 
});
        <<endfor>>
    <<endif>>

<<endfor>>

<<< 
function getColumnMethod(f) {
    if (f.type === 'boolean') {
        return 'boolean';
    } else if (f.type === 'number') {
        return f.subtype === null || f.subtype === 'integer' ? 'integer' : 'float';
    } else if (f.type === 'string') {
        if (f.subtype === 'text') return 'text';
        else if (f.subtype === 'rich') return 'longText';
        return 'string';
    } else if (f.type === 'datetime') {
        if (f.subtype === 'date') return 'date';
        else if (f.subtype === 'time') return 'time';
        return 'datetime';
    } else if (f.type === 'object') {
        return 'json';
    } else if (f.type === 'file') {
        return 'string';
    } else if (f.type === 'entity') {
        return 'integer'
    } else {
        return 'string';
    }
}
>>>
