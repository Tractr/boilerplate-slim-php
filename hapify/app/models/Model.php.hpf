<?php
 
namespace App\Models;
 
use Psr\Http\Message\ServerRequestInterface as Request;
 
class <<Model pascal>> extends BaseModel {
 
	/**
     * The table associated with the model.
     *
     * @var string
     */
   	protected $table = '<<Model snake>>';
 
   	/**
     * The attributes that are mass assignable.
     *
     * @var array
     */
   	protected $fillable = array(
<<# Define all non-internal and not multiple relations fields as settable values >>
<<for Fields not internal and not (entity and multiple) f>>
        '<<f snake>>',
<<endfor>>
   	);
 
   	/**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = array(
<<# Define all hidden fields as hidden >>
<<for Fields hidden f>>
        '<<f snake>>',
<<endfor>>
    );

<<# Loop over every non-internal password fields and hash them when saving >>
<<for Fields password and not internal f>>
 
    /**
     * Set the field <<f lower>>.
     *
     * @param  string  $value
     */
    public function set<<f pascal>>Attribute($value)
    {
        $this->attributes['<<f snake>>'] = \App\Library\Encryption::hash($value);
    }
<<endfor>>

<<# Loop over every datetime fields and convert fromt/to timestamp when setting/getting the value >>
<<for Fields datetime f>>
 
    /**
     * Get the field <<f lower>>.
     *
     * @return integer
     */
    public function get<<f pascal>>Attribute()
    {
        return $this->dateToTimestamp($this->attributes['<<f snake>>']);
    }
 
    /**
     * Set the field <<f lower>>.
     *
     * @param  string  $value
     */
    public function set<<f pascal>>Attribute($value)
    {
        $this->attributes['<<f snake>>'] = $this->timestampToDate($value);
    }
<<endfor>>

<<# Loop over every boolean fields and convert to boolean when setting the value >>
<<for Fields boolean f>>
 
    /**
     * Get the field <<f lower>>.
     *
     * @return boolean
     */
    public function get<<f pascal>>Attribute()
    {
        return $this->intToBoolean($this->attributes['<<f snake>>']);
    }
<<endfor>>

<<# Loop over every object fields and convert from/to JSON when setting/getting the value >>
<<for Fields object f>>
 
    /**
     * Get the field <<f lower>>.
     *
     * @return mixed
     */
    public function get<<f pascal>>Attribute()
    {
        return $this->jsonToObject($this->attributes['<<f snake>>']);
    }
 
    /**
     * Set the field <<f lower>>.
     *
     * @param  mixed  $value
     */
    public function set<<f pascal>>Attribute($value)
    {
        $this->attributes['<<f snake>>'] = $this->objectToJson($value);
    }
<<endfor>>
 
    /**
     * Get search cursor
     * @param  array $filter
     * @param  Request $request
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public static function getCursor($filter, Request $request) {
    
        unset($filter['_page']);
        unset($filter['_limit']);
        unset($filter['_order']);
        unset($filter['_sort']);
    
        $query = <<Model pascal>>::query();

<<# Loop over every searchable fields and build the search query >>
<<for Fields searchable f>>
    
    <<# If the field is an entity relation >>
    <<if f entity>>
        // Filter by related <<f snake>>
        if (isset($filter['<<f snake>>'])) {
        <<# In case of many-to-many relation >>
        <<if f multiple >>
            $query = $query->whereHas('_<<f snake>>', function(\Illuminate\Database\Eloquent\Builder $query) use ($filter) {
                $query->whereIn('<<f.m snake>>', is_array($filter['<<f snake>>']) ? $filter['<<f snake>>'] : [$filter['<<f snake>>']], 'and');
            });
        <<# In case of one-to-one relation >>
        <<else>>
            $query = $query->where('<<f snake>>', $filter['<<f snake>>']);
        <<endif>>
        }
        <<# 
            If the search action is accessible as owner and the field is the ownership field,
            force the filter to equal the current user's id.
        >>
        <<if SearchAccess owner>>
            <<if f ownership>>
        else if (!$request->getAttribute('fromAdmin') && $request->getAttribute('userId') !== null) {
            $query = $query->where('<<f snake>>', '=', $request->getAttribute('userId'));
        }
            <<endif>>
        <<endif>>

    <<# If the field is NOT an entity relation >>
    <<else>>
        // Filter <<f lower>>
        if (isset($filter['<<f snake>>'])) {
        <<# If the field is type string and label, perform a %LIKE% search >>
        <<if f string and label>>
            $query = $query->where('<<f snake>>', 'LIKE', "%{$filter['<<f snake>>']}%");
        <<# If the field is a boolean, convert to boolean >>
        <<elseif f boolean>>
            $query = $query->where('<<f snake>>', static::toBoolean($filter['<<f snake>>']));
        <<# If the field is a date, convert timestamp to date >>
        <<elseif f datetime>>
            $query = $query->where('<<f snake>>', static::toDate($filter['<<f snake>>']));
        <<# Otherwise>>
        <<else>>
            $query = $query->where('<<f snake>>', $filter['<<f snake>>']);
        <<endif>>
        }

    <<endif>>

    <<# If the field is a number, add extra filters (min & max) for filtering by range >>
    <<if f number>>
        // Set min for <<f lower>> if defined
        if (isset($filter['<<f snake>>__min'])) {
            $query = $query->where('<<f snake>>', '>=', $filter['<<f snake>>__min']);
        }
        // Set max for <<f lower>> if defined
        if (isset($filter['<<f snake>>__max'])) {
            $query = $query->where('<<f snake>>', '<=', $filter['<<f snake>>__max']);
        }
    <<endif>>

    <<# If the field is a date, add extra filters (min & max) and convert timestamp to date >>
    <<if f datetime>>
        // Set min for <<f lower>> if defined
        if (isset($filter['<<f snake>>__min'])) {
            $query = $query->where('<<f snake>>', '>=', static::toDate($filter['<<f snake>>__min']));
        }
        // Set max for <<f lower>> if defined
        if (isset($filter['<<f snake>>__max'])) {
            $query = $query->where('<<f snake>>', '<=', static::toDate($filter['<<f snake>>__max']));
        }
    <<endif>>

<<endfor>>
    
        return $query;
    }

<<# Foreach entity relation field, add a method to get the populated relationship >>
<<for Fields entity f>>
 
    /**
     * Return relationship for <<f lower>>
    <<if f multiple>>
     * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
    <<else>>
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
    <<endif>>
     */
    public function _<<f snake>>()
    {
    <<# In case of many-to-many relation >>
    <<if f multiple>>
        return $this->belongsToMany('App\Models\<<f.m pascal>>', '<<Model snake>>__<<f snake>>', '<<Model snake>>', '<<f.m snake>>');
    <<# In case of one-to-one relation >>
    <<else>>
        return $this->hasOne('App\Models\<<f.m pascal>>', '<<f.m.f.primary raw>>', '<<f snake>>');
    <<endif>>
    }
<<endfor>>
}